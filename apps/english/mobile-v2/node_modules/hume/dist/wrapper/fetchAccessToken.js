"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchAccessToken = void 0;
const base64Encode_1 = require("./base64Encode");
const zod_1 = require("zod");
/**
 * Fetches a new access token from the Hume API using the provided API key and Secret key.
 *
 * @param args - The arguments for the request.
 * @example
 * ```typescript
 * async function getToken() {
 *   const accessToken = await fetchAccessToken({
 *     apiKey: 'test',
 *     secretKey: 'test',
 *   });
 *
 *   console.log(accessToken); // Outputs the access token
 * }
 * ```
 */
const fetchAccessToken = (_a) => __awaiter(void 0, [_a], void 0, function* ({ apiKey, secretKey, host = "api.hume.ai", }) {
    const authString = `${apiKey}:${secretKey}`;
    const encoded = (0, base64Encode_1.base64Encode)(authString);
    const res = yield fetch(`https://${host}/oauth2-cc/token`, {
        method: "POST",
        headers: {
            "Content-Type": "application/x-www-form-urlencoded",
            Authorization: `Basic ${encoded}`,
        },
        body: new URLSearchParams({
            grant_type: "client_credentials",
        }).toString(),
        cache: "no-cache",
    });
    return zod_1.z
        .object({
        access_token: zod_1.z.string(),
    })
        .transform((data) => {
        return data.access_token;
    })
        .parse(yield res.json());
});
exports.fetchAccessToken = fetchAccessToken;
