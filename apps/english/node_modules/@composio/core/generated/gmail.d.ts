import { type TriggerEvent } from "@composio/core";
type GMAIL_NEW_GMAIL_MESSAGE_PAYLOAD = {
    /**
     * Attachment List
     * @description The list of attachments in the message
     * @default null
     */
    attachment_list: unknown[] | null;
    /**
     * Message ID
     * @description The message ID of the message
     * @default null
     */
    message_id: string | null;
    /**
     * Message Text
     * @description The text of the message
     * @default null
     */
    message_text: string | null;
    /**
     * Message Timestamp
     * @description The timestamp of the message
     * @default null
     */
    message_timestamp: string | null;
    /**
     * Payload
     * @description The payload of the message
     * @default null
     */
    payload: Record<string, never> | null;
    /**
     * Sender
     * @description The sender of the message
     * @default null
     */
    sender: string | null;
    /**
     * Subject
     * @description The subject of the message
     * @default null
     */
    subject: string | null;
    /**
     * Thread ID
     * @description The thread ID of the message
     * @default null
     */
    thread_id: string | null;
    /**
     * To
     * @description The recipient of the message
     * @default null
     */
    to: string | null;
};
/**
 * Map of Composio's GMAIL toolkit.
 */
export declare const GMAIL: {
    slug: string;
    tools: {
        ADD_LABEL_TO_EMAIL: string;
        CREATE_EMAIL_DRAFT: string;
        CREATE_LABEL: string;
    };
    triggerTypes: {
        NEW_GMAIL_MESSAGE: {
            slug: string;
            name: string;
            description: string;
            instructions: string;
            config: {
                properties: {
                    interval: {
                        default: number;
                        description: string;
                        title: string;
                        type: string;
                    };
                    labelIds: {
                        default: string;
                        description: string;
                        examples: string[];
                        title: string;
                        type: string;
                    };
                    query: {
                        default: string;
                        description: string;
                        examples: string[];
                        title: string;
                        type: string;
                    };
                    userId: {
                        default: string;
                        description: string;
                        examples: string[];
                        title: string;
                        type: string;
                    };
                };
                title: string;
                type: string;
            };
            payload: {
                properties: {
                    attachment_list: {
                        anyOf: ({
                            items: {};
                            type: string;
                        } | {
                            type: string;
                            items?: undefined;
                        })[];
                        default: any;
                        description: string;
                        title: string;
                    };
                    message_id: {
                        anyOf: {
                            type: string;
                        }[];
                        default: any;
                        description: string;
                        title: string;
                    };
                    message_text: {
                        anyOf: {
                            type: string;
                        }[];
                        default: any;
                        description: string;
                        title: string;
                    };
                    message_timestamp: {
                        anyOf: {
                            type: string;
                        }[];
                        default: any;
                        description: string;
                        title: string;
                    };
                    payload: {
                        anyOf: {
                            type: string;
                        }[];
                        default: any;
                        description: string;
                        title: string;
                    };
                    sender: {
                        anyOf: {
                            type: string;
                        }[];
                        default: any;
                        description: string;
                        title: string;
                    };
                    subject: {
                        anyOf: {
                            type: string;
                        }[];
                        default: any;
                        description: string;
                        title: string;
                    };
                    thread_id: {
                        anyOf: {
                            type: string;
                        }[];
                        default: any;
                        description: string;
                        title: string;
                    };
                    to: {
                        anyOf: {
                            type: string;
                        }[];
                        default: any;
                        description: string;
                        title: string;
                    };
                };
                title: string;
                type: string;
            };
            type: string;
        };
    };
};
/**
 * Type map of all available trigger payloads for toolkit "GMAIL".
 */
export type GMAIL_TRIGGER_PAYLOADS = {
    NEW_GMAIL_MESSAGE: GMAIL_NEW_GMAIL_MESSAGE_PAYLOAD;
};
/**
 * Type map of all available trigger events for toolkit "GMAIL".
 */
export type GMAIL_TRIGGER_EVENTS = {
    NEW_GMAIL_MESSAGE: TriggerEvent<GMAIL_NEW_GMAIL_MESSAGE_PAYLOAD>;
};
export {};
