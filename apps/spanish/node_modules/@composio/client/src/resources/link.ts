// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../core/resource';
import { APIPromise } from '../core/api-promise';
import { RequestOptions } from '../internal/request-options';
import { path } from '../internal/utils/path';

export class Link extends APIResource {
  /**
   * Creates a new authentication link session that users can use to connect their
   * accounts
   */
  create(body: LinkCreateParams, options?: RequestOptions): APIPromise<LinkCreateResponse> {
    return this._client.post('/api/v3/connected_accounts/link', { body, ...options });
  }

  /**
   * Retrieves information about an authentication session using the link token
   */
  retrieve(token: string, options?: RequestOptions): APIPromise<LinkRetrieveResponse> {
    return this._client.get(path`/api/v3/internal/connected_accounts/link/${token}`, options);
  }

  /**
   * Submits authentication input for a link session
   */
  submit(token: string, body: LinkSubmitParams, options?: RequestOptions): APIPromise<LinkSubmitResponse> {
    return this._client.post(path`/api/v3/internal/connected_accounts/link/${token}`, { body, ...options });
  }
}

export interface LinkCreateResponse {
  /**
   * The connected account ID that was created
   */
  connected_account_id: string;

  /**
   * ISO timestamp when the link expires
   */
  expires_at: string;

  /**
   * The generated link token for the auth session
   */
  link_token: string;

  /**
   * The redirect URI to send users to for authentication
   */
  redirect_url: string;
}

export interface LinkRetrieveResponse {
  connected_account: LinkRetrieveResponse.ConnectedAccount;

  project: LinkRetrieveResponse.Project;

  toolkit: LinkRetrieveResponse.Toolkit;
}

export namespace LinkRetrieveResponse {
  export interface ConnectedAccount {
    /**
     * The connected account ID
     */
    id: string;

    mode:
      | 'OAUTH2'
      | 'OAUTH1'
      | 'API_KEY'
      | 'BASIC'
      | 'BILLCOM_AUTH'
      | 'BEARER_TOKEN'
      | 'GOOGLE_SERVICE_ACCOUNT'
      | 'NO_AUTH'
      | 'BASIC_WITH_JWT'
      | 'CALCOM_AUTH';

    status: 'INITIATED' | 'ACTIVE' | 'FAILED';

    /**
     * The user callback URL if applicable. If active, redirect to this URL
     */
    callback_url?: string;

    expected_input_fields?: Array<ConnectedAccount.ExpectedInputField>;

    /**
     * The OAuth provider redirect URL if applicable. If active, redirect to this URL
     */
    redirect_url?: string;
  }

  export namespace ConnectedAccount {
    export interface ExpectedInputField {
      displayName: string;

      name: string;

      required: boolean;

      type: string;

      default?: string | null;

      description?: string;

      legacy_template_name?: string;
    }
  }

  export interface Project {
    /**
     * The project logo URL
     */
    logo?: string;

    /**
     * The project name
     */
    name?: string;
  }

  export interface Toolkit {
    /**
     * The toolkit logo
     */
    logo: string;

    /**
     * The toolkit display name
     */
    name: string;

    /**
     * The toolkit slug
     */
    slug: string;
  }
}

export interface LinkSubmitResponse {
  /**
   * The status of the connection attempt
   */
  status: 'ACTIVE' | 'FAILED' | 'INITIATED';

  /**
   * The user callback URL if applicable
   */
  callback_url?: string;

  /**
   * The OAuth provider redirect URL if applicable. If initiated, redirect to this
   * URL
   */
  redirect_url?: string;
}

export interface LinkCreateParams {
  /**
   * The auth config id to create a link for
   */
  auth_config_id: string;

  /**
   * The user id to create a link for
   */
  user_id: string;

  /**
   * The callback url to create a link for
   */
  callback_url?: string;
}

export interface LinkSubmitParams {
  /**
   * The input fields for authentication
   */
  input: { [key: string]: unknown };
}

export declare namespace Link {
  export {
    type LinkCreateResponse as LinkCreateResponse,
    type LinkRetrieveResponse as LinkRetrieveResponse,
    type LinkSubmitResponse as LinkSubmitResponse,
    type LinkCreateParams as LinkCreateParams,
    type LinkSubmitParams as LinkSubmitParams,
  };
}
